<?php

class ExploitationAcheteursForm extends acCouchdbObjectForm {

    public static $config_appellations = null;
    public static $config_appellations_mout = null;
    const FORM_NAME_NEGOCES = 'negoces';
    const FORM_NAME_COOPERATIVES = 'cooperatives';
    const FORM_NAME_MOUTS = 'mouts';
    const FORM_NAME_CAVE_PARTICULIERE = 'cave_particuliere';
    const FORM_SUFFIX_NEW = '_new';
    const FORM_NAME = 'exploitation_acheteurs[%s]';

    protected function updateDefaultsFromObject() {
        parent::updateDefaultsFromObject();
        $this->setDefault('lies_saisis_cepage', $this->getObject()->getDocument()->exist('lies_saisis_cepage') && $this->getObject()->getDocument()->exist('lies_saisis_cepage'));
        if($this->getObject()->getDocument()->hasDateDepotMairie()){
            $this->setDefault('date_depot_mairie', $this->getObject()->getDocument()->getDateDepotMairieFr());
        }

    }

    public function configure() {

        if($this->getObject()->getDocument()->hasDateDepotMairie()){
            $this->setWidget('date_depot_mairie', new sfWidgetFormInput());
            $this->widgetSchema->setLabel('date_depot_mairie', 'Date de dépot en mairie :');
            $this->setValidator('date_depot_mairie', new sfValidatorRegex(array('required' => true, 'pattern' => "/^([0-9]){2}\/([0-9]){2}\/([0-9]){4}$/"),array('invalid' => 'Le format de la date de dépot en mairie doit être jj/mm/aaaa', 'required' => 'La date de dépot en mairie est requise')));
        }

        $this->setWidget('lies_saisis_cepage', new sfWidgetFormChoice(array('choices' => array(1 => "Cépage", 0 => "Appellation"), 'expanded' => true)));
        $this->setValidator('lies_saisis_cepage', new sfValidatorBoolean());

        $this->getWidget('lies_saisis_cepage')->setLabel("Vous avez le choix de saisir le volume à détruire par :");

        $this->configureMultipleItem(self::FORM_NAME_NEGOCES, $this->getObject()->getArrayNegocesWithAppellation(), self::getListeAppellations(), ListAcheteursConfig::getNegoces());
        $this->configureMultipleItem(self::FORM_NAME_COOPERATIVES, $this->getObject()->getArrayCooperativesWithAppellation(), self::getListeAppellations(), ListAcheteursConfig::getCooperatives());
        $this->configureMultipleItem(self::FORM_NAME_MOUTS, $this->getObject()->getArrayMoutsWithAppellation(), self::getListeAppellationsMout(), ListAcheteursConfig::getMouts());
        $this->configureSingleItem(self::FORM_NAME_CAVE_PARTICULIERE, $this->getObject()->getArrayCaveParticuliereWithAppellation(), self::getListeAppellations());

        $this->getValidatorSchema()->setPostValidator(new ValidatorExploitationAcheteurs());

        $this->widgetSchema->setNameFormat(self::FORM_NAME);
        //$this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);
    }

    public function bind(array $taintedValues = null, array $taintedFiles = null) {
        $this->bindCheckDelete(self::FORM_NAME_NEGOCES, $taintedValues);
        $this->configureMultipleItemFromBind(self::FORM_NAME_NEGOCES . self::FORM_SUFFIX_NEW, $taintedValues, self::getListeAppellations(), ListAcheteursConfig::getNegoces());

        $this->bindCheckDelete(self::FORM_NAME_COOPERATIVES, $taintedValues);
        $this->configureMultipleItemFromBind(self::FORM_NAME_COOPERATIVES . self::FORM_SUFFIX_NEW, $taintedValues, self::getListeAppellations(), ListAcheteursConfig::getCooperatives());

        $this->bindCheckDelete(self::FORM_NAME_MOUTS, $taintedValues);
        $this->configureMultipleItemFromBind(self::FORM_NAME_MOUTS . self::FORM_SUFFIX_NEW, $taintedValues, self::getListeAppellationsMout(), ListAcheteursConfig::getMouts());

        parent::bind($taintedValues, $taintedFiles);
    }

    protected function configureMultipleItemFromBind($name, $taintedValues, $appellations, $acheteurs) {
        if (isset($taintedValues[$name])) {
            $this->configureMultipleItem($name, $taintedValues[$name], $appellations, $acheteurs);
        }
    }

    protected function configureMultipleItem($name, $values, $appellations, $acheteurs) {
        $form = new BaseForm();
        foreach ($values as $acheteur_cvi => $acheteur_appellations) {
            if (isset($acheteurs[$acheteur_cvi])) {
                $form->embedForm($acheteur_cvi, new ExploitationAcheteursItemForm($acheteur_appellations, array('appellations' => $appellations)));
            }
        }
        $this->embedForm($name, $form);
    }

    protected function configureSingleItem($name, $values, $appellations) {
        $this->embedForm($name, new ExploitationAcheteursItemForm($values, array('appellations' => $appellations)));
    }

    protected function bindCheckDelete($name, $taintedValues) {
        foreach ($this->embeddedForms[$name] as $cvi => $form) {
            if (!isset($taintedValues[$name][$cvi])) {
                unset($this->widgetSchema[$name][$cvi]);
            }
        }
    }

    public function doUpdateObject($values) {

        if($values['lies_saisis_cepage']) {
            if(!$this->getObject()->getDocument()->exist('lies_saisis_cepage') || !$this->getObject()->getDocument()->lies_saisis_cepage) {
                $this->getObject()->getDocument()->recolte->cleanLies();
            }
            $this->getObject()->getDocument()->add('lies_saisis_cepage', (int)$values['lies_saisis_cepage']);
        } else {
            if($this->getObject()->getDocument()->exist('lies_saisis_cepage') && $this->getObject()->getDocument()->lies_saisis_cepage) {
                $this->getObject()->getDocument()->recolte->cleanLies();
            }
            $this->getObject()->getDocument()->remove('lies_saisis_cepage');
        }
        $this->getObject()->getNoeudAppellations()->delete();

        $this->updateMultipleItem(self::FORM_NAME_NEGOCES, self::FORM_NAME_NEGOCES, $values, self::getListeAppellations());
        $this->updateMultipleItem(self::FORM_NAME_NEGOCES . self::FORM_SUFFIX_NEW, self::FORM_NAME_NEGOCES, $values, self::getListeAppellations());

        $this->updateMultipleItem(self::FORM_NAME_COOPERATIVES, self::FORM_NAME_COOPERATIVES, $values, self::getListeAppellations());
        $this->updateMultipleItem(self::FORM_NAME_COOPERATIVES . self::FORM_SUFFIX_NEW, self::FORM_NAME_COOPERATIVES, $values, self::getListeAppellations());

        $this->updateMultipleItem(self::FORM_NAME_MOUTS, self::FORM_NAME_MOUTS, $values, self::getListeAppellationsMout());
        $this->updateMultipleItem(self::FORM_NAME_MOUTS . self::FORM_SUFFIX_NEW, self::FORM_NAME_MOUTS, $values, self::getListeAppellationsMout());

        $this->updateSingleItem(self::FORM_NAME_CAVE_PARTICULIERE, $values, self::getListeAppellations());
        $this->getObject()->getCouchdbDocument()->update(array('from_acheteurs'));
        if($this->getObject()->getCouchdbDocument()->hasDateDepotMairie()){
                $this->getObject()->getCouchdbDocument()->add('date_depot_mairie',Date::getIsoDateFromFrenchDate($values['date_depot_mairie']));
        }
    }

    protected function updateMultipleItem($value_name, $name, $values, $config_appellations) {
        if (isset($values[$value_name])) {
            foreach ($values[$value_name] as $cvi => $appellations) {
                foreach ($appellations as $appellation_key => $appellation) {
                    if ($appellation == true) {
                        $this->getObject()->getNoeudAppellations()->getOrAdd($appellation_key)->get($name)->add(null, $cvi);
                    }
                }
            }
        }
    }

    protected function updateSingleItem($name, $values, $config_appellations) {
        if (isset($values[$name])) {
            foreach ($values[$name] as $appellation_key => $appellation) {
                if ($appellation == true) {
                    $this->getObject()->getNoeudAppellations()->getOrAdd($appellation_key)->set($name, 1);
                }
            }
        }
    }

    public function updateObjectEmbeddedForms($values, $forms = null) {

    }

    public static function getNewItemAjax($name, $cvi, $values, $appellations) {
        $form_container = new BaseForm();
        $form_container->getWidgetSchema()->setNameFormat(self::FORM_NAME);
        $form = new BaseForm();
        $form->embedForm($cvi, new ExploitationAcheteursItemForm($values, array('appellations' => $appellations)));
        $form_container->embedForm($name . self::FORM_SUFFIX_NEW, $form);
        return $form_container;
    }

    public static function getListeAppellations() {

        if (self::$config_appellations == null) {
            $configuration = ConfigurationClient::getConfiguration();
            $appellations = array();
            foreach($configuration->declaration->getMentions() as $item) {
                $appellations["appellation_".$item->getAppellation()->getKey()."/mention".str_replace("DEFAUT", "", $item->getKey())] = $item;
            }
            return self::$config_appellations = $appellations;
        }

        return self::$config_appellations;
    }

    public static function getListeAppellationsMout() {

        if (self::$config_appellations_mout == null) {
            $configuration = ConfigurationClient::getConfiguration();
            $appellations = array();
            foreach($configuration->declaration->getMentions() as $item) {
                if(!$item->hasMout()) {
                    continue;
                }
                $appellations["appellation_".$item->getAppellation()->getKey()."/mention".$item->getKey()] = $item;
            }
            self::$config_appellations_mout = $appellations;
        }

        return self::$config_appellations_mout;
    }

}
