<?php

class TiersExploitantForm extends acCouchdbObjectForm {

    public function configure() {
        $years = range(1900, date('Y'));
        $this->setWidgets(array(
				'nom' => new sfWidgetFormInputText(array('label' => 'Prenom Nom')),
				'code_postal' => new sfWidgetFormInputText(array('label' => 'Code Postal')),
				'adresse' => new sfWidgetFormTextarea(array('label' => 'Adresse')),
				'commune' => new sfWidgetFormInputText(array('label' => 'Commune')),
				'telephone' => new sfWidgetFormInputText(array('label' => 'Téléphone')),
				));

        $this->setValidators(array(
				   'nom' => new sfValidatorString(array('required' => true), array('required' => 'Champ Requis')),
				   'adresse' => new sfValidatorString(array('required' => true), array('required' => 'Champ Requis')),
				   'code_postal' => new sfValidatorRegex(array('required' => true, 'pattern' => '/^[0-9]+$/'), array('invalid' => 'Ne doit contenir que des chiffres', 'required' => 'Champ Requis')),
				   'commune' => new sfValidatorString(array('required' => true), array( 'required' => 'Champ Requis')),
				   'telephone' => new sfValidatorString(array('required' => false, 'max_length' => 10, 'min_length' => 10), array('invalid' => 'Ne doit contenir que des chiffres')),
				   ));
        //$this->validatorSchema->setPostValidator();

        $this->widgetSchema->setNameFormat('exploitant[%s]');
        $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);

    }

    public function doUpdateObject($values) {
        $valuesDiff = [];
        foreach($values as $key => $value) {
            if(! $this->getObject()->exist($key)) {
                continue;
            }
            if($this->getObject()->get($key) == $value) {
                continue;
            }
            $valuesDiff[$key] = $value;
        }
        $this->sendMailChanged($valuesDiff);
        $this->updateCompte($valuesDiff);
        parent::doUpdateObject($values);
    }

    public function sendMailChanged($valuesDiff) {
        if(! count($valuesDiff)) {
            return;
        }

        $etablissement = $this->getObject()->getDocument()->getEtablissementObject();

        $body = "Des informations concernant l'établissement ".$etablissement->nom." (".(($etablissement->cvi) ? $etablissement->cvi : $etablissement->num_interne).") ont été modifiées depuis l'étape exploitation de la ".strtoupper($this->getObject()->getDocument()->type).".\n\n";

        $body .= "Les modifications sont les suivantes :\n\n";

        foreach($valuesDiff as $key => $value) {
            if(! $this->getObject()->exist($key)) {
                continue;
            }
            if($this->getObject()->get($key) != $value) {
                $body .= "- " . $key . " (gestionnaire de l'exploitation) : \"" . $this->getObject()->get($key) . "\" devient \"". $value . "\"\n";
            }
        }

        $body .= "\n Si ces modifications sont correctes pour qu'elles soient prises en compte vous devez les enregistrer dans la fiche de l'établissement : ".sprintf(sfConfig::get("app_giilda_url_compte"), $etablissement->getSociete()->identifiant);

        $subject = "Modifications d'informations pour l'établissement ".$etablissement->nom." (".(($etablissement->cvi) ? $etablissement->cvi : $etablissement->num_interne).")";

        $message = sfContext::getInstance()->getMailer()->compose([sfConfig::get('app_email_from') => sfConfig::get('app_email_from_name')], sfConfig::get('app_email_notifications'), $subject, $body);
        sfContext::getInstance()->getMailer()->send($message);

        return true;
    }

    public function updateCompte($values)
    {
        if(! count($values)) {
            return;
        }

        $dr = $this->getObject()->getDocument();
        $compte = $dr->getExploitant();

        if ($compte->fonction !== 'Exploitant') {
            return;
        }

        foreach ($values as $key => $value) {
            $compte->$key = $value;
        }

        $compte->save();
    }
}
