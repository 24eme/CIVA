<?php

class TiersExploitationForm extends acCouchdbObjectForm {

    protected function updateDefaultsFromObject() {
        parent::updateDefaultsFromObject();

        $this->setDefault('intitule', $this->getObject()->getIntitule());
        $this->setDefault('nom_without_intitule', $this->getObject()->getNomWithoutIntitule());
    }

    public function configure() {
        $intitules = array(''=>"");
        foreach(sfConfig::get('app_configuration_compte_intitules') as $intitule) {
            $intitules[$intitule] = $intitule;
        }

        $this->setWidgets(array(
				'telephone' => new sfWidgetFormInputText(array('label' => 'Téléphone')),
				'fax' => new sfWidgetFormInputText(array('label' => 'Fax')),
                'code_postal' => new sfWidgetFormInputText(array('label' => 'Code Postal')),
                'adresse' => new sfWidgetFormTextarea(array('label' => 'Adresse')),
                'commune' => new sfWidgetFormInputText(array('label' => 'Commune')),
				));
	$faxTelValidator = new sfValidatorRegex(array('pattern' => '/^\d{10}$/','required' => false, 'max_length' => 10, 'min_length' => 10),
                                                                                    array('max_length' => 'Le numéro doit être formatté avec 10 chiffres',
                                                                                          'min_length' => 'Le numéro doit être formaté avec 10 chiffres',
                                                                                            'invalid' => 'Ne doit contenir que des chiffres'));

        $this->setValidators(array(
				   'nom_without_intitule' => new sfValidatorString(array('required' => true), array('required' => 'Champ Requis')),
				   'siret' => new sfValidatorRegex(array('pattern' => '/^\d+$/', 'required' => false), array('invalid' => 'Ne doit contenir que des chiffres', 'required' => 'Champ Requis')),
				   'telephone' => $faxTelValidator,
                   'fax' => $faxTelValidator,
                   'intitule' => new sfValidatorString(array('required' => false)),
                   'code_postal' => new sfValidatorRegex(array('required' => true, 'pattern' => '/^[0-9]+$/'), array('invalid' => 'Ne doit contenir que des chiffres', 'required' => 'Champ Requis')),
                    'adresse' => new sfValidatorString(array('required' => true), array('required' => 'Champ Requis')),
                    'commune' => new sfValidatorString(array('required' => true), array( 'required' => 'Champ Requis')),
				   ));

        if(!$this->getObject()->exist('siret')) {
            unset($this->widgetSchema['siret']);
            unset($this->validatorSchema['siret']);
        }

        $this->widgetSchema->setNameFormat('exploitation[%s]');
        $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);
    }

    public function doUpdateObject($values) {
        $valuesDiff = [];
        foreach($values as $key => $value) {
            if(! $this->getObject()->exist($key)) {
                continue;
            }
            if($this->getObject()->get($key) == $value) {
                continue;
            }
            $valuesDiff[$key] = [$this->getObject()->get($key), $value];
        }
        if($values['intitule'].' '.$values['nom_without_intitule'] != $this->getObject()->getIntitule().' '.$this->getObject()->getNomWithoutIntitule()) {
            $valuesDiff['nom'] = [$this->getObject()->getIntitule().' '.$this->getObject()->getNomWithoutIntitule(), $values['intitule'].' '.$values['nom_without_intitule']];
        }
        $this->sendMailChanged($valuesDiff);
        $this->updateEtablissement($valuesDiff);
        parent::doUpdateObject($values);

        $this->getObject()->nom = $values['intitule'].' '.$values['nom_without_intitule'];
    }

    public function sendMailChanged($valuesDiff) {
        if(! count($valuesDiff)) {
            return;
        }

        $etablissement = $this->getObject()->getDocument()->getEtablissementObject();

        $body = "Des informations concernant l'établissement ".$etablissement->nom." (".(($etablissement->cvi) ? $etablissement->cvi : $etablissement->num_interne).") ont été modifiées depuis l'étape exploitation de la ".strtoupper($this->getObject()->getDocument()->type).".\n\n";

        $body .= "Les modifications sont les suivantes :\n\n";

        foreach($valuesDiff as $key => $value) {
            $body .= "- " . $key . " (exploitation) : \"" . $value[0] . "\" devient \"". $value[1] . "\"\n";
        }

        $body .= "\n Si ces modifications sont correctes pour qu'elles soient prises en compte vous devez les enregistrer dans la fiche de l'établissement : ".sprintf(sfConfig::get("app_giilda_url_compte"), $etablissement->getSociete()->identifiant);

        $subject = "Modifications d'informations pour l'établissement ".$etablissement->nom." (".(($etablissement->cvi) ? $etablissement->cvi : $etablissement->num_interne).")";

        $message = sfContext::getInstance()->getMailer()->compose([sfConfig::get('app_email_from') => sfConfig::get('app_email_from_name')], sfConfig::get('app_email_notifications'), $subject, $body);
        sfContext::getInstance()->getMailer()->send($message);

        return true;
    }

    public function updateEtablissement($values)
    {
        if (! count($values)) {
            return;
        }

        $etablissement = $this->getObject()->getDocument()->getEtablissementObject();

        foreach ($values as $key => $value) {
            $etablissement->$key = end($value);
        }

        $etablissement->save();
    }
}
