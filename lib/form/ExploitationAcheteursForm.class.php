<?php

class ExploitationAcheteursForm extends sfCouchdbFormDocumentJson {
    public function configure() {
        $configuration = ConfigurationClient::getConfiguration();
        $config_appellations = $configuration->getArrayAppellations();
        $config_appellations_mout = $configuration->getArrayAppellationsMout();

        $this->configureMultipleQualite('negoces', $this->getObject()->getArrayNegocesWithAppellation(), $config_appellations);
        $this->configureMultipleQualite('cooperatives', $this->getObject()->getArrayCooperativesWithAppellation(), $config_appellations);
        $this->configureMultipleQualite('mouts', $this->getObject()->getArrayMoutsWithAppellation(), $config_appellations_mout);
        $this->configureSingleQualite('cave_particuliere', $this->getObject()->getArrayCaveParticuliereWithAppellation(), $config_appellations);
        
        $this->widgetSchema->setNameFormat('exploitation_acheteurs[%s]');
        $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);
    }

    public static function getNewQualiteAjax($name, $cvi, $values, $config_appellations) {
        $form_container = new BaseForm();
        $form_container->getWidgetSchema()->setNameFormat('exploitation_acheteurs[%s]');
        $form = new BaseForm();
        $form->embedForm($cvi, new ExploitationAcheteursItemForm(array_merge(array('cvi' => $cvi), $values), array('conf_appellation' => $config_appellations)));
        $form_container->embedForm($name.'_new',$form);
        return $form_container;
    }

    protected function configureMultipleQualite($name, $values, $config_appellations) {
        if (isset($this->embeddedForm[$name])) {
            $form = $this->embeddedForm[$name];
        } else {
            $form = new BaseForm();
        }
        foreach($values as $acheteur_cvi => $acheteur_appellations) {
            $form->embedForm($acheteur_cvi, new ExploitationAcheteursItemForm(array_merge(array('cvi' => $acheteur_cvi), $acheteur_appellations), array('conf_appellation' => $config_appellations)));
        }
        if (!isset($this->embeddedForm[$name])) {
            $this->embedForm($name,$form);
        }
    }

    protected function configureSingleQualite($name, $values, $config_appellations) {
        $this->embedForm($name, new ExploitationAcheteursItemForm($values, array('conf_appellation' => $config_appellations, 'cvi_required' => false)));
    }

    public function bind(array $taintedValues = null, array $taintedFiles = null) {
        $configuration = ConfigurationClient::getConfiguration();
        $config_appellations = $configuration->getArrayAppellations();
        $config_appellations_mout = $configuration->getArrayAppellationsMout();

        if (isset($taintedValues['negoces_new'])) {
            $this->configureMultipleQualite('negoces_new', $taintedValues['negoces_new'], $config_appellations);
        }
        if (isset($taintedValues['cooperatives_new'])) {
            $this->configureMultipleQualite('cooperatives_new', $taintedValues['cooperatives_new'], $config_appellations);
        }
        if (isset($taintedValues['mouts_new'])) {
            $this->configureMultipleQualite('mouts_new', $taintedValues['mouts_new'], $config_appellations_mout);
        }

        $this->bindCheckDelete('negoces', $taintedValues);
        $this->bindCheckDelete('cooperatives', $taintedValues);
        $this->bindCheckDelete('mouts', $taintedValues);

        parent::bind($taintedValues, $taintedFiles);
    }

    protected function bindCheckDelete($name, $taintedValues) {
        foreach ($this->embeddedForms[$name] as $cvi => $form) {
                if (!isset($taintedValues[$name][$cvi])) {
                    unset($this->widgetSchema[$name][$cvi]);
                }
       }
    }

    public function doUpdateObject($values) {
        $configuration = ConfigurationClient::getConfiguration();
        $config_appellations = $configuration->getArrayAppellations();
        $config_appellations_mout = $configuration->getArrayAppellationsMout();

        foreach($this->getObject() as $key => $item) {
            $this->getObject()->remove($key);
        }

       $this->updateMultipleQualite('negoces', 'negoces', $values, $config_appellations);
       $this->updateMultipleQualite('negoces_new', 'negoces', $values, $config_appellations);
       $this->updateMultipleQualite('cooperatives','cooperatives', $values, $config_appellations);
       $this->updateMultipleQualite('cooperatives_new', 'cooperatives', $values, $config_appellations);
       $this->updateMultipleQualite('mouts', 'mouts', $values, $config_appellations_mout);
       $this->updateMultipleQualite('mouts_new', 'mouts', $values, $config_appellations_mout);
       $this->updateSingleQualite('cave_particuliere', $values, $config_appellations);

    }

    protected function updateMultipleQualite($value_name, $name, $values, $config_appellations) {
        if (isset($values[$value_name])) {
            foreach($values[$value_name] as $cvi => $appellations) {
                unset($appellations['cvi']);
                foreach($appellations as $appellation_key => $appellation) {
                    if (isset($config_appellations[$appellation_key])) {
                        if ($appellation == true) {
                            $this->getObject()->add('appellation_'.$config_appellations[$appellation_key]->appellation)->get($name)->add(null,$cvi);
                        }
                    }
                }
            }
        }
    }

    protected function updateSingleQualite($name, $values, $config_appellations) {
        if (isset($values[$name])) {
            unset($values['cvi']);
            foreach($values[$name] as $appellation_key => $appellation) {
                if (isset($config_appellations[$appellation_key])) {
                    if ($appellation == true) {
                        $this->getObject()->add('appellation_'.$config_appellations[$appellation_key]->appellation)->set($name, 1);
                    }
                }
            }
        }
    }

    public function updateObjectEmbeddedForms($values, $forms = null) {
        //parent::updateObjectEmbeddedForms($values, $forms);
    }
}