<?php

class ValidatorExploitationAcheteurs extends sfValidatorSchema
{
  protected $_count_total = 0;

  protected function configure($options = array(), $messages = array())
  {
    
  }

  protected function doClean($values)
  {
    $this->_count_total = 0;

    $errorSchema = new sfValidatorErrorSchema($this);

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_NEGOCES,
                                                      ListAcheteursConfig::getNegoces(),
                                                      ExploitationAcheteursForm::getListeAppellations()));

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_NEGOCES . ExploitationAcheteursForm::FORM_SUFFIX_NEW,
                                                      ListAcheteursConfig::getNegoces(),
                                                      ExploitationAcheteursForm::getListeAppellations()));

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_COOPERATIVES,
                                                      ListAcheteursConfig::getCooperatives(),
                                                      ExploitationAcheteursForm::getListeAppellations()));

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_COOPERATIVES . ExploitationAcheteursForm::FORM_SUFFIX_NEW,
                                                      ListAcheteursConfig::getCooperatives(),
                                                      ExploitationAcheteursForm::getListeAppellations()));

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_MOUTS,
                                                      ListAcheteursConfig::getMouts(),
                                                      ExploitationAcheteursForm::getListeAppellationsMout()));

    $errorSchema->addError($this->doCleanMultipleItem($values,
                                                      ExploitationAcheteursForm::FORM_NAME_MOUTS . ExploitationAcheteursForm::FORM_SUFFIX_NEW,
                                                      ListAcheteursConfig::getMouts(),
                                                      ExploitationAcheteursForm::getListeAppellationsMout()));

    $errorSchema->addError($this->doCleanSingle($values,
                                                      ExploitationAcheteursForm::FORM_NAME_CAVE_PARTICULIERE,
                                                      ExploitationAcheteursForm::getListeAppellations()));


    if (!($this->_count_total > 0)) {
        $errorSchema->addError(new sfValidatorError($this, 'required'));
    }

    if (count($errorSchema))
    {
      throw new sfValidatorErrorSchema($this, $errorSchema);
    }

    return $values;
  }

  protected function doCleanMultipleItem($values, $name, $liste_acheteurs, $liste_appellations) {
      $errorSchemaLocal = new sfValidatorErrorSchema($this);
      if (isset($values[$name])) {
          foreach($values[$name] as $cvi => $appellations) {
              if (!isset($liste_acheteurs[$cvi])) {
                  $errorSchemaLocal->addError(new sfValidatorError($this, 'invalid'));
                  unset($values[$name][$cvi]);
              }
              foreach ($appellations as $appellation_key => $appellation) {
                  if (!isset($liste_appellations[$appellation_key])) {
                      $errorSchemaLocal->addError(new sfValidatorError($this, 'invalid'));
                      unset($values[$name][$cvi][$appellation_key]);
                  } elseif ($appellation == true) {
                      $this->_count_total++;
                  }
              }
          }
      }
      return $errorSchemaLocal;
  }

  protected function doCleanSingle($values, $name, $liste_appellations) {
      $errorSchemaLocal = new sfValidatorErrorSchema($this);
      if (isset($values[$name])) {
          foreach ($values[$name] as $appellation_key => $appellation) {
                if (!isset($liste_appellations[$appellation_key])) {
                     $errorSchemaLocal->addError(new sfValidatorError($this, 'invalid'));
                     unset($values[$name][$appellation_key]);
                } elseif($appellation == true) {
                    $this->_count_total++;
                }
          }
      }
      return $errorSchemaLocal;
  }
}